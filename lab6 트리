#include <iostream>
#include <string>
char prec[4][2] = {'*',2,'/',2,'+',1,'-',1 };

class Node {
private:
	char data;
	int prio;
	Node *left;
	Node *right;
	Node(char value) :data(value), prio(100), left(NULL), right(NULL) {}		//노드가 피연산자일 경우
	Node(char value, int prio_) :data(value), prio(prio_), left(NULL), right(NULL) {}		//노드가 연산자일 경우
	friend class Tree;
};

class Tree {
private:
	Node * root;
public:
	void evalprint();
	void print(int num);
	void insert(char num);
	void operator_(char num, int prio);
	void operand_(char num);
	int evalTree(Node* p);
	int check(char num);
	void inorder(Node* ptr);
	void postorder(Node* ptr);
	void preorder(Node* ptr);
	void del();
	void delete_(Node* ptr);
	Tree() { root = 0; }
	~Tree() {};
};

void Tree::evalprint()	//트리 계산불러오는 함수 
{
	Node* ptr = root;
	if (ptr != NULL)
	{
		std::cout << evalTree(ptr) << std::endl;
	}
	else
		std::cout << "입력된 수식이 없습니다." << std::endl;
}
int Tree::check(char num)
{
	for (int i = 0; i < 4; ++i)
	{
		if (prec[i][0] == num)
			return 0;
	}
	return 1;
}
int Tree::evalTree(Node* p)		//트리를 계산하는 함수 
{
	int value = 0;
	int left = 0;
	int right = 0;
	if (p != NULL)
	{
		if (check(p->data))
			value = p->data - '0';
		else
		{
			left = evalTree(p->left);
			right = evalTree(p->right);
			switch (p->data)
			{
			case '+':
				value = left + right;
				break;
			case '-':
				value = left - right;
				break;
			case '*':
				value = left * right;
				break;
			case '/':
				value = left / right;
				break;
			}
		}
	}
	return value;
}
void Tree::insert(char num)		//노드 넣는 함수 
{
	for (int i = 0; i < 4; ++i)
		if (prec[i][0] == num)		//받은 num 연산자와 같다면
		{
			operator_(num, prec[i][1]);		//operator(기호,연산순위) 넣는다.
			return;
		}
	operand_(num);		//숫자라면 operand 호출 
}

void Tree::operand_(char num)		//숫자 노드 추가 
{
	Node* temp = new Node(num);
	if (root == NULL)	//트리에 아무것도 없다면 
		root = temp;
	else
	{
		Node* p = root;
		while (p->right != NULL)	//오른쪽이 비어있지 않으면
			p = p->right;
		p->right = temp;		//오른쪽에 추가 
	}
}
void Tree::operator_(char num, int prio)	//(기호, 연산순위) 받아와 기호 노드 추가 
{
	Node* temp = new Node(num, prio);
	Node* p = root;
	if (root->prio >= temp->prio)	//새로운 노드의 연산자가 더 작거나 같다면 (숫자를 만났을 경우도)
	{
		temp->left = root;
		root = temp;
	}
	else
	{		//새로운 노드의 연산자가 더 크다면 
		temp->left = root->right;
		root->right = temp;
	}
}
void Tree::print(int num)	//pre.in.post 구별해서 출력하는 함수
{
	Node* ptr = root;	//ptr에 head 복사 
	switch (num)
	{
	case 0:
		inorder(ptr);
		break;
	case 1:
		postorder(ptr);
		break;
	case 2:
		preorder(ptr);
		break;
	defalut:
		std::cout << "그런거 없어요" << std::endl;
	}
	std::cout << std::endl;
}

void Tree::inorder(Node *ptr)	//ptr은 head를 복사한 값이다.
{
	if (ptr) {
		inorder(ptr->left);
		std::cout << ptr->data;
		inorder(ptr->right);
	}
}
void Tree::postorder(Node *ptr)
{
	if (ptr)
	{
		postorder(ptr->left);
		postorder(ptr->right);
		std::cout << ptr->data;
	}
}
void Tree::preorder(Node *ptr)
{
	if (ptr)
	{
		std::cout << ptr->data;
		preorder(ptr->left);
		preorder(ptr->right);
	}
}

void Tree::del()
{
	Node* ptr = root;
	delete_(ptr);
	std::cout << "트리가 삭제 됐습니다. "<< std::endl;
	root = NULL;
}

void Tree::delete_(Node* ptr)
{
	if (ptr == NULL)
		return;

	delete_(ptr->left);
	delete_(ptr->right);

	//std::cout << " del Tree data : " << ptr->data;
	delete ptr;
}

int main()
{
	Tree mtree;

	std::string input = "";		//명령값
	std::string problem = "";	//산술식

	while (true) {
		std::cout << " ( 1.insert, 2.Evaluation, 3.Preorder Traversal, 4.Inorder Traversal, 5.PostOrder Traversal ,6.Delete ,7.quit ) " << std::endl;
		std::cout << "원하는 명령 번호를 입력하세요 : ";
		std::cin >> input;
		if (input == "1") {
			std::cout << "산술식을 입력하세요 : ";
			std::cin >> problem;
			for (int i = 0; i < problem.length(); ++i) {
				mtree.insert(problem[i]);

			}
			std::cout << "Tree에 산술식이 들어갔습니다." << std::endl;
		}
		else if (input == "2") {
			mtree.evalprint();
		}

		else if (input == "4") {
			mtree.print(0);
		}
		else if (input == "5") {
			mtree.print(1);
		}
		else if (input == "3") {
			mtree.print(2);
		}


		else if (input == "6") {
			mtree.del();
		}
		else if (input == "7") {
			std::cout << "프로그램을 종료합니다.";
			break;
		}
	}

    return 0;
}

