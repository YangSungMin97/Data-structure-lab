#include <iostream>
#include <fstream>
using namespace std;

const int MAX = 8;

class Node {
private:
	int vertex;
	Node* next;
public:
	Node(int num) :vertex(num), next(NULL) {}
	friend class Graph;
};

class Graph {
private:
	Node * graph[MAX];
	bool visited[MAX];
	Node* front;
	Node* rear;
public:
	Graph() :front(NULL), rear(NULL) {}
	void Graph_graph_init();
	void Graph_visited_init();
	void Graph_insert(int num1, int num2);
	void Graph_display();
	void enqueue(int v);
	int dequeue();
	void bfs(int v);
	void dfs(int v);
};

void Graph::Graph_graph_init()		//graph배열을 NULL로!
{
	for (int i = 0; i<MAX; i++)
		graph[i] = NULL;
}

void Graph::Graph_visited_init()	//visited배열을 NULL로!
{
	for (int i = 0; i<MAX; i++)
		visited[i] = 0;
}

void Graph::Graph_insert(int num1, int num2)// 노드를 연결해 그래프 만드는 함수
{
	if (graph[num1] == NULL)	//해당 vertex가 비어있다면 node 넣기
	{
		Node* temp_1 = new Node(num1);
		graph[num1] = temp_1;
	}
	if (graph[num2] == NULL)
	{
		Node* temp_2 = new Node(num2);
		graph[num2] = temp_2;
	}

	//num1 노드의 마지막 next에 num2 노드 추가
	Node* p = graph[num1];
	Node* temp1 = new Node(num2); //num2 노드를 temp1에 생성
	while (p->next != NULL)
		p = p->next;
	p->next = temp1;	//마지막 p의 next는 temp1이 됨.

						//num2 노드의 마지막 next에 num1 노드 추가 
	p = graph[num2];
	Node* temp2 = new Node(num1);
	while (p->next != NULL)
		p = p->next;
	p->next = temp2;
}

void Graph::Graph_display()		//인접 리스트 출력
{
	for (int i = 0; i<MAX; i++)
	{
		if (graph[i] != NULL) {
			Node* p = graph[i];
			while (p != NULL) {
				cout << p->vertex << " ";
				p = p->next;
			}
			cout << endl;
		}
	}
}

void Graph::enqueue(int v)
{
	Node*temp = new Node(v);
	if (front == NULL)		//front가 NULL일 경우
	{
		front = temp;
		rear = temp;
	}
	else//front가 NULL이 아닐 경우
	{
		rear->next = temp;
		rear = temp;
	}
}

int Graph::dequeue()
{
	Node* p;
	int v;
	p = front;
	front = p->next;
	v = p->vertex;
	delete(p);
	return v;
}

void Graph::bfs(int v)
{
	Node* p;
	enqueue(v);
	visited[v] = 1;			//visited[v]에 방문 표시!
	cout << v << " ";		//방문한 곳 출력

	while (front)	//하나의 vertex 경로씩 탐색
	{
		v = dequeue();	//dequeue함수로 v가 수정 됨.
		for (p = graph[v]; p; p = p->next)	//graph[v]부터 next 노드로 진행
		{
			if (!visited[p->vertex])	//해당 노드가 visited[p->vertex]를 방문한 적이 없다면
			{
				enqueue(p->vertex);
				visited[p->vertex] = 1;
				cout << p->vertex << " ";		//p의 vertex 출력
			}
		}
	}
}

void Graph::dfs(int v)
{
	Node* p;
	visited[v] = 1;			//visited[v]에 방문 표시!
	cout << v << " ";		//방문한 곳 출력

	for (p = graph[v]; p; p = p->next)	//graph[v]부터 next 노드로 진행
	{
		if (!visited[p->vertex])	//해당 노드가 visited[p->vertex]를 방문한 적이 없다면
			dfs(p->vertex);		//dfs(p->vertex) 호출
	}
}

int main(void)
{
	Graph g;
	g.Graph_graph_init();
	g.Graph_visited_init();
	ifstream inStream;
	inStream.open("input.txt");
	int num1, num2;
	for (int i = 0; i<MAX; i++)
	{
		inStream >> num1 >> num2;
		g.Graph_insert(num1, num2);
	}

	cout << "인접리스트 출력" << endl;
	g.Graph_display();
	std::cout<< std::endl;
	cout << "DFS 출력" << endl;
	g.dfs(0);
	cout << endl;
	cout << "BFS 출력" << endl;
	g.Graph_visited_init();
	g.bfs(0);
	cout << endl;

	inStream.close();
	return 0;
}
