#include<iostream>
#include <string>
using namespace std;

class Node {
private:
	int data;
	Node* next = NULL;
	Node* prev = NULL;
	friend class List;
};
class List {
private:
	Node * head = NULL;
public:
	void insert(int num);
	void deleteNode(int num);
	bool isempty();
	void insearch(int num);
	void forward();
	void backward();
	int get_length();
};

int List::get_length() {

	Node* p = NULL;
	int length = 0;

	if (isempty())
		cout << "not list" << endl;
	else
	{
		p = head;
		while (p != 0)
		{
			length += 1;
			p = p->next;
		}
	}

	return length;
}
void List::forward()
{
	Node* p = NULL;

	if (isempty())
		cout << "not list" << endl;
	else
	{
		p = head;
		while (p != 0)
		{
			cout << p->data << " ";
			p = p->next;
		}
		cout << endl;
	}
}
void List::backward()
{
	Node* p = NULL;

	if (isempty())
		cout << "not list" << endl;
	else
	{
		p = head;
		while (p->next != 0)
		{
			p = p->next;
		}
		while (p != 0)
		{
			cout << p->data << " ";
			p = p->prev;
		}
		cout << endl;
	}
}
void List::insearch(int num)
{
	Node* p = NULL;
	Node* q = NULL;

	p = head;
	if (!isempty())
	{
		if (p->data == num)
		{
			cout <<"찾는 수 "<< p->data << "은(는) 리스트 안에 있습니다."<< endl;
		}
		else
		{
			while (p != 0 && p->data != num)
			{
				q = p;
				p = p->next;
			}
			if (p != 0)
			{
				cout << "찾는 수 " << p->data << "은(는) 리스트 안에 있습니다." << endl;
			}
			else
			{
				cout << "해당 숫자는 리스트 안에 없습니다." << endl;
			}
		}
	}
	else
		cout << "List is empty" << endl;
}
void List::deleteNode(int num)
{
	Node* p = NULL;
	Node* q = NULL;
	p = head;
	if (!isempty())
	{
		if (p->data == num)
		{
			q = p;
			p = p->next;
			head = p;
			cout << q->data << "을(를) 리스트에서 삭제했습니다. "<< endl;
			delete q;
		}
		else
		{
			while (p != 0 && p->data != num)
			{
				q = p;
				p = p->next;
			}
			if (p != 0)
			{
				if (p->next != 0)
				{
					q->next = p->next;
					p->next->prev = q;
				}
				else
				{
					q->next = NULL;
				}
				cout << p->data <<"을(를) 리스트에서 삭제했습니다. " << endl;
				delete p;
			}
			else
			{
				cout << "해당 숫자는 리스트 안에 없습니다." << endl;
			}
		}
	}
	else
	{
		cout << "LIst is Empty" << endl;
	}
}

void List::insert(int num)
{
	Node* p = NULL;
	Node* q = NULL;
	Node* temp = new Node();
	temp->data = num;

	if (head == 0)
		head = temp;
	else
	{
		p = head;
		if (temp->data <= head->data)
		{
			temp->next = p;
			p->prev = temp;
			head = temp;
		}
		else
		{
			while (p != 0 && temp->data > p->data)
			{
				q = p;
				p = p->next;
			}
			if (p != 0)
			{
				q->next = temp;
				temp->prev = q;
				temp->next = p;
				p->prev = temp;
			}
			else
			{
				q->next = temp;
				temp->prev = q;
			}
		}
	}
}


bool List::isempty()
{
	if (head == 0)
		return 1;
	else
		return 0;
}
int main()
{
	List mList;
	int num = 0, num2;
	string input;

	int number;		//인덱스

	while (1)
	{
		cout << " 명령을 입력하세요. ( 1. insert, 2. delete, 3. backward, 4. forward, 5. search, 6. get_length, 7. quit ) : ";
		cin >> input;
		if (input == "insert")
		{
			cout << "넣고 싶은 수를 써주세요 : ";
			cin >> num;
			mList.insert(num);
			cout << "list에 " << num << "이 들어갔습니다." << endl;
		}
		else if (input == "delete")
		{
			cout << "지우고 싶은 수를 써주세요 : ";
			cin >> num;
			mList.deleteNode(num);
		}
		else if (input == "search")
		{
			cout << "찾으시는 수를 써주세요 : ";
			cin >> num;
			mList.insearch(num);
		}
		else if (input == "forward")
		{
			mList.forward();
		}
		else if (input == "backward")
			mList.backward();
		else if (input == "get_length") {
			std::cout << mList.get_length() << std::endl;
		}
		else if (input == "quit")
		{
			cout << "프로그램을 종료 합니다. ";
			break;
		}
		else {
			cout << "Bad command" << endl;
		}
	}
	return 0;
}

